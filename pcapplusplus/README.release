December 2019 release of PcapPlusPlus (v19.12)
==============================================

PcapPlusPlus web-site:  https://pcapplusplus.github.io/

GitHub page:            https://github.com/seladb/PcapPlusPlus


This package contains:
----------------------

 - PcapPlusPlus compiled libraries
    - Common++.lib
    - Packet++.lib
    - Pcap++.lib
 - These libraries are compiled in 4 different configurations (each containing all libraries above):
    - 32bit debug configuration (`x86\Debug`)
    - 32bit release configuration (`x86\Release`)
    - 64bit debug configuration (`x64\Debug`)
    - 64bit release configuration (`x64\Release`)
 - PcapPlusPlus header files (under `header\`)
 - Compiled examples:
    - 32bit executables (under `x86\examples`)
    - 64bit executables (under `x64\examples`)
 - Visual Studio example solution configured to work with PcapPlusPlus compiled binaries (under `ExampleProject\`)


Running the examples:
---------------------

 - Make sure you have WinPcap (or Wireshark) installed
 - Make sure you have Visual C++ Redistributable for Visual Studio installed
 - If examples still doesn't run, install Visual C++ Redistributable for Visual Studio 2010 also

In order to compile your application with these binaries you need to:
---------------------------------------------------------------------

 - Make sure you have Microsoft Visual Studio installed
 - Make sure you have WinPcap Developer's pack installed (can be downloaded from https://www.winpcap.org/devel.htm)
 - Make sure you have pthread-win32 (can be downloaded from: ftp://sourceware.org/pub/pthreads-win32/pthreads-w32-2-9-1-release.zip)
 - You need to add to your project all of the include and binary paths required for PcapPlusPlus. The best option is to take a look at the configuration of the ExampleProject (under `ExampleProject\` folder). Another option
   is to use the ExampleProject, delete all the code from it and start writing your own code
 - Before using the ExampleProject solution please make sure you update the PcapPlusPlusPropertySheet.props file (inside `ExampleProject\` folder) with the following:
    - Set the value of the `PcapPlusPlusHome` XML node to the folder where PcapPlusPlus binaries package is located (the one you downloaded)
    - Set the value of the `WinPcapHome` XML node to the folder where WinPcap Developer's Pack is located
    - Set the value of the `PThreadWin32Home` node to the folder where pthread-win32 is located
 - Now you can load the solution and build it. You can switch between Debug/Release and x86/x64 configurations
 - If you get an error of `The Windows SDK version 8.1 is not found` follow these steps:
    - Right click on `ExampleProject` project -> Choose "Properties"
    - Go to "Configuration Properties" -> "General"
    - Open the drop down list next to "Windows SDK version" and choose the version installed on your machine
 - Build result will be in `ExampleProject\Debug` or `ExampleProject\Release` (according to chosen configuration)


Release notes (changes from v19.04)
-----------------------------------

- Added support for Visual Studio 2017 and 2019
- Added support for DPDK 19.08 (thanks @gx740 !)
- Major improvements in TCP reassembly (thanks @gx740 !):
    - Reducing memory consumption by cleaning up old connections 
    - A lot of performance and code optimizations
- Added out-of-the-box support for MacOS 10.14 Mojave and later
- Added support for FreeBSD (thanks @rickyzhang82 !)
- Added support for GTP v1 protocol
- Added DPDK KNI support (thanks @echo-Mike !)
- Added KniPong example to demo the new KNI API (thanks @echo-Mike !)
- Lots of performance optimizations and code cleanups (special thanks to @gx740 !)
- Major revamp of reading/writing pcapng files - use streaming instead of memory copies and added support for compression (thanks @Dysl3xik !)
- Added support for [pcap_setdirection](https://linux.die.net/man/3/pcap_setdirection) in `PcapLiveDevice` (thanks @MrSiz !)
- Performance optimization and fixes in IPReassembly (thanks @gx740, @silviucpp !)
- Added a new `BPFStringFilter` pcap filter to handle raw BPF filter strings and deprecated the old `IPcapDevice::matchPacketWithFilter()` API (thanks @Dysl3xik !)
- Let the user add custom LDFLAGS to the main Makefile (thanks @rom1sqr !)
- Added data validations in `IPv4Layer` before parsing the next layers (thanks @gx740 !)
- Created a new unit-test framework to make it easier to write unit-tests
- Replaced old 3rd-party __debug-new__ with new homegrown [MemPlumber](https://github.com/seladb/MemPlumber)
- Tons of bug fixes (special thanks to @gx740 , @echo-Mike , @Dysl3xik !)

Contributors
------------

Thank you for everyone who contributed to this release:

- @gx740 
- @echo-Mike 
- @Dysl3xik 
- @rickyzhang82 
- @MrSiz 
- Roman Koshelev
- @silviucpp
- @eteran 
- @tomerb 
- @Minilulatsch
- @rom1sqr 
- @christinaa 
- @russkel 
